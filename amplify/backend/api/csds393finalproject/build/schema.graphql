type UserInformation @aws_iam @aws_api_key {
  id: ID!
  name: String!
  groupId: Int
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelUserInformationConnection @aws_api_key @aws_iam {
  items: [UserInformation]!
  nextToken: String
}

input ModelUserInformationFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  groupId: ModelIntInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelUserInformationFilterInput]
  or: [ModelUserInformationFilterInput]
  not: ModelUserInformationFilterInput
}

type Query {
  getUserInformation(id: ID!): UserInformation @aws_api_key @aws_iam
  listUserInformations(filter: ModelUserInformationFilterInput, limit: Int, nextToken: String): ModelUserInformationConnection @aws_api_key @aws_iam
}

input ModelUserInformationConditionInput {
  name: ModelStringInput
  groupId: ModelIntInput
  and: [ModelUserInformationConditionInput]
  or: [ModelUserInformationConditionInput]
  not: ModelUserInformationConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateUserInformationInput {
  id: ID
  name: String!
  groupId: Int
}

input UpdateUserInformationInput {
  id: ID!
  name: String
  groupId: Int
}

input DeleteUserInformationInput {
  id: ID!
}

type Mutation {
  createUserInformation(input: CreateUserInformationInput!, condition: ModelUserInformationConditionInput): UserInformation @aws_api_key @aws_iam
  updateUserInformation(input: UpdateUserInformationInput!, condition: ModelUserInformationConditionInput): UserInformation @aws_api_key @aws_iam
  deleteUserInformation(input: DeleteUserInformationInput!, condition: ModelUserInformationConditionInput): UserInformation @aws_api_key @aws_iam
}

input ModelSubscriptionUserInformationFilterInput {
  id: ModelSubscriptionIDInput
  name: ModelSubscriptionStringInput
  groupId: ModelSubscriptionIntInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionUserInformationFilterInput]
  or: [ModelSubscriptionUserInformationFilterInput]
}

type Subscription {
  onCreateUserInformation(filter: ModelSubscriptionUserInformationFilterInput): UserInformation @aws_subscribe(mutations: ["createUserInformation"]) @aws_api_key @aws_iam
  onUpdateUserInformation(filter: ModelSubscriptionUserInformationFilterInput): UserInformation @aws_subscribe(mutations: ["updateUserInformation"]) @aws_api_key @aws_iam
  onDeleteUserInformation(filter: ModelSubscriptionUserInformationFilterInput): UserInformation @aws_subscribe(mutations: ["deleteUserInformation"]) @aws_api_key @aws_iam
}
